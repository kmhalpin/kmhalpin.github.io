{"version":3,"sources":["utils.js","components/EdgeDetection.jsx","components/HoughTransformation.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Texture","isTextureUrl","text","test","split","imageHandler","Image","resize","canvas","image","onload","canvasWidth","Math","min","window","innerWidth","setAttribute","height","width","src","images","url","name","CanvasRef","createRef","EdgeDetection","mask","useState","setCanvas","setImage","u_mask","u_doGray","uniform","setUniform","Canvas","loadTexture","setUniforms","current","useEffect","vertexString","fragmentString","handleResize","addEventListener","removeEventListener","destroy","Grid","container","justifyContent","alignItems","spacing","item","style","maxHeight","maxWidth","ref","xs","sm","md","lg","xl","FormControl","variant","InputLabel","id","Select","labelId","value","onChange","e","target","label","map","v","idx","MenuItem","alt","FormControlLabel","control","Checkbox","checked","inputProps","defaultProps","HoughTransformation","App","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2073379e.chunk.js","sourcesContent":["import { Texture } from 'glsl-canvas-js/dist/cjs/glsl';\n\nTexture.isTextureUrl = (text) => text && (/\\.(jpg|jpeg|png|ogv|webm|mp4|bmp)$/i).test(text.split('?')[0]);\n\nexport default {};\n\nconst imageHandler = new Image();\n\nexport const resize = (canvas, image) => {\n  imageHandler.onload = () => {\n    const canvasWidth = Math.min(300 * (window.innerWidth / 360), 360);\n    canvas.setAttribute('width', canvasWidth);\n    canvas.setAttribute('height', canvasWidth * (imageHandler.height / imageHandler.width));\n    // alert(`${canvasWidth} ${imageHandler.height} ${imageHandler.width}`);\n  };\n  imageHandler.src = image;\n  // const deviceWidth = window.innerWidth / 480;\n\n  // canvas.setAttribute('width', `${Math.min(400 * deviceWidth, 480)}px`);\n  // canvas.setAttribute('height', `${Math.min(300 * deviceWidth, 360)}px`);\n};\n","import React, { createRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Canvas } from 'glsl-canvas-js/dist/cjs/glsl';\nimport {\n  Grid,\n  FormControl,\n  Select,\n  InputLabel,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n} from '@material-ui/core';\nimport { resize } from '../utils';\n\nconst images = [\n  {\n    url: '/sample/lena_gray.bmp',\n    name: 'Lena',\n  },\n  {\n    url: '/sample/barbara_gray.bmp',\n    name: 'Barbara',\n  },\n  {\n    url: '/sample/Chrysanthemum.jpg',\n    name: 'Chrysanthemum',\n  },\n  {\n    url: '/sample/Desert.jpg',\n    name: 'Desert',\n  },\n  {\n    url: '/sample/Hydrangeas.jpg',\n    name: 'Hydrangeas',\n  },\n  {\n    url: '/sample/Jellyfish.jpg',\n    name: 'Jellyfish',\n  },\n  {\n    url: '/sample/Koala.jpg',\n    name: 'Koala',\n  },\n  {\n    url: '/sample/Lighthouse.jpg',\n    name: 'Lighthouse',\n  },\n  {\n    url: '/sample/Penguins.jpg',\n    name: 'Penguins',\n  },\n  {\n    url: '/sample/Tulips.jpg',\n    name: 'Tulips',\n  },\n];\n\nconst vertex = `\nattribute vec2 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_normal;\nattribute vec2 a_color;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_normal;\nvarying vec2 v_color;\n\nvoid main() {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n\n  v_texcoord = a_texcoord;\n  v_normal = a_normal;\n  v_color = a_color;\n}\n`;\n\nconst fragment = `\nprecision lowp float;\n\nuniform sampler2D u_img;\nuniform vec2 u_resolution;\nuniform float u_mask;\n\nuniform bool u_doGray;\n\nvarying vec2 v_texcoord;\n\nvec4 getPixel(sampler2D img, vec2 pixel) {\n  if(u_doGray) {\n    return vec4(vec3(dot(texture2D(img, pixel).rgb, vec3(1.0/3.0))), 1.0);\n  } else {\n    return texture2D(img, pixel);\n  }\n}\n\nvoid main() {\n  vec2 canvasPixel = vec2(1.0) / u_resolution;\n\n  vec4 n[9];\n  n[0] = getPixel(u_img, v_texcoord + canvasPixel * vec2(-1, -1));\n  n[1] = getPixel(u_img, v_texcoord + canvasPixel * vec2( 0, -1));\n  n[2] = getPixel(u_img, v_texcoord + canvasPixel * vec2( 1, -1));\n  n[3] = getPixel(u_img, v_texcoord + canvasPixel * vec2(-1,  0));\n  n[4] = getPixel(u_img, v_texcoord + canvasPixel * vec2( 0,  0));\n  n[5] = getPixel(u_img, v_texcoord + canvasPixel * vec2( 1,  0));\n  n[6] = getPixel(u_img, v_texcoord + canvasPixel * vec2(-1,  1));\n  n[7] = getPixel(u_img, v_texcoord + canvasPixel * vec2( 0,  1));\n  n[8] = getPixel(u_img, v_texcoord + canvasPixel * vec2( 1,  1));\n\n  vec4 sobel_x = n[2] + (u_mask * n[5]) + n[8] - (n[0] + (u_mask * n[3]) + n[6]);\n  vec4 sobel_y = n[0] + (u_mask * n[1]) + n[2] - (n[6] + (u_mask * n[7]) + n[8]);\n  vec4 sobel = sqrt((sobel_x * sobel_x) + (sobel_y * sobel_y));\n\n  gl_FragColor = vec4(sobel.rgb, 1);\n}\n`;\n\nconst CanvasRef = createRef();\n\nconst EdgeDetection = ({ mask }) => {\n  const [canvas, setCanvas] = useState(null);\n  const [image, setImage] = useState(images[0].url);\n  const [uniform, setUniform] = useState({\n    u_mask: mask,\n    u_doGray: false,\n  });\n\n  if (canvas instanceof Canvas) {\n    canvas.loadTexture('u_img', image);\n    canvas.setUniforms(uniform);\n    resize(CanvasRef.current, image);\n  }\n\n  useEffect(() => {\n    setUniform({ ...uniform, u_mask: mask });\n\n    setCanvas(new Canvas(CanvasRef.current, {\n      vertexString: vertex,\n      fragmentString: fragment,\n    }));\n\n    const handleResize = () => resize(CanvasRef.current, image);\n    handleResize();\n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (canvas instanceof Canvas) canvas.destroy();\n    };\n  }, [mask]);\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"center\" spacing={2}>\n      <Grid item>\n        <div style={{ width: '100%', height: '100%' }}>\n          <canvas\n            style={{ maxHeight: '360px', maxWidth: '360px' }}\n            ref={CanvasRef}\n          />\n        </div>\n      </Grid>\n      <Grid item xs={10} sm={10} md={10} lg={6} xl={4}>\n        <Grid container justifyContent=\"center\" alignItems=\"center\" spacing={2}>\n          <Grid item xs={8}>\n            <FormControl\n              variant=\"outlined\"\n              style={{ width: '100%' }}\n            >\n              <InputLabel id=\"demo-simple-select-outlined-label\">Pilih gambar</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={image}\n                onChange={(e) => setImage(e.target.value)}\n                label=\"Pilih gambar\"\n              >\n                {images.map((v, idx) => (\n                  <MenuItem key={idx} value={v.url}>\n                    <img src={v.url} alt={v.name} height={25} />\n                    {' '}\n                    {v.name}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={4}>\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  checked={uniform.u_doGray}\n                  onChange={(e) => setUniform({\n                    ...uniform,\n                    u_doGray: e.target.checked,\n                  })}\n                  inputProps={{ 'aria-label': 'primary checkbox' }}\n                />\n              )}\n              label=\"Hitam putih\"\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nEdgeDetection.defaultProps = {\n  mask: 2.0,\n};\n\nEdgeDetection.propTypes = {\n  mask: PropTypes.number,\n};\n\nexport default EdgeDetection;\n","import React from 'react';\n\nconst HoughTransformation = () => <p>soon</p>;\n\nexport default HoughTransformation;\n","import React from 'react';\nimport {\n  Routes, Route, Link, BrowserRouter,\n} from 'react-router-dom';\nimport EdgeDetection from './components/EdgeDetection';\nimport HoughTransformation from './components/HoughTransformation';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <nav>\n        <Link to=\"edge-detection-sobel\">Edge Detection (Sobel)</Link>\n        {' '}\n        <Link to=\"edge-detection-prewitt\">Edge Detection (Prewitt)</Link>\n        {' '}\n        <Link to=\"hough-transformation\">Hough Transformation</Link>\n      </nav>\n      <Routes>\n        <Route path=\"/\" element={<p>Welcome</p>} />\n        <Route path=\"edge-detection-sobel\" element={<EdgeDetection mask={2.0} />} />\n        <Route path=\"edge-detection-prewitt\" element={<EdgeDetection mask={1.0} />} />\n        <Route path=\"hough-transformation\" element={<HoughTransformation />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {} from './utils';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}